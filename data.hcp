#include <cassert> // assert()

#include <cstring> // strlen()

namespace websocket
{
  namespace data
  {
    inline
    frame_t frame(std::size_t id, bool masked)
    {
      switch(id)
	{
	case 1: return frame_1(masked);
	case 2: return frame_2(masked);
	case 3: return frame_3(masked);
	case 4: return frame_4(masked);
	default: assert(false);
	}
    }

    inline
    const uint8_t * frame_buffer(std::size_t id, bool masked, std::size_t & size)
    {
      switch(id)
	{
	case 1: return frame_1_buffer(masked, size);
	case 2: return frame_2_buffer(masked, size);
	case 3: return frame_3_buffer(masked, size);
	case 4: return frame_4_buffer(masked, size);
	default: assert(false);
	}
    }

    inline
    const char * frame_payload(std::size_t id)
    {
      switch(id)
	{
	case 1: return frame_1_payload();
	case 2: return frame_2_payload();
	case 3: return frame_3_payload();
	case 4: return frame_4_payload();
	default: assert(false);
	}
    }

    inline
    frame_t frame_1(bool masked)
    {
      frame_t frame;

      frame.is_final(true);
      frame.opcode_(opcode::text);
      frame.is_masked(masked);
      if(masked) frame.payload_mask(0x4feed25d);
      frame.length(std::strlen(frame_1_payload()));

      return frame;
    }

    inline
    frame_t frame_2(bool masked)
    {
      frame_t frame;

      frame.is_final(true);
      frame.opcode_(opcode::text);
      frame.is_masked(masked);
      if(masked) frame.payload_mask(0x4feed25d);
      frame.length(std::strlen(frame_2_payload()));

      return frame;
    }

    inline
    frame_t frame_3(bool masked)
    {
      frame_t frame;

      frame.is_final(true);
      frame.opcode_(opcode::text);
      frame.is_masked(masked);
      if(masked) frame.payload_mask(0xa208357f);
      frame.length(std::strlen(frame_3_payload()));

      return frame;
    }

    inline
    frame_t frame_4(bool masked)
    {
      frame_t frame;

      frame.is_final(true);
      frame.opcode_(opcode::text);
      frame.is_masked(masked);
      if(masked) frame.payload_mask(0x2f8b4b91);
      frame.length(std::strlen(frame_4_payload()));

      return frame;
    }

    const unsigned char * frame_1_buffer(bool masked, std::size_t & size)
    {
      if(masked)
	{
	  static const unsigned char frame[] = {0x81, 0x8c, 0x5d, 0xd2, 0xee, 0x4f, 0x15, 0xb7, 0x82, 0x23, 0x32, 0xf2, 0x99, 0x20, 0x2f, 0xbe, 0x8a, 0x6e};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
      else
	{
	  static const unsigned char frame[] = {0x81, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
    }

    const unsigned char * frame_2_buffer(bool masked, std::size_t & size)
    {
      if(masked)
	{
	  static const unsigned char frame[] = {0x81, 0x8d, 0x5d, 0xd2, 0xee, 0x4f, 0x15, 0xb7, 0x82, 0x23, 0x32, 0xf2, 0x99, 0x20, 0x2f, 0xbe, 0x8a, 0x6e, 0x7c};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
      else
	{
	  static const unsigned char frame[] = {0x81, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x21};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
    }

    const unsigned char * frame_3_buffer(bool masked, std::size_t & size)
    {
      if(masked)
	{
	  static const unsigned char frame[] = {0x81, 0xfb, 0x7f, 0x35, 0x08, 0xa2, 0x33, 0x5a, 0x7a, 0xc7, 0x12, 0x15, 0x61, 0xd2, 0x0c, 0x40, 0x65, 0x82, 0x1b, 0x5a, 0x64, 0xcd, 0x0d, 0x15, 0x7b, 0xcb, 0x0b, 0x15, 0x69, 0xcf, 0x1a, 0x41, 0x24, 0x82, 0x1c, 0x5a, 0x66, 0xd1, 0x1a, 0x56, 0x7c, 0xc7, 0x0b, 0x40, 0x7a, 0x82, 0x1e, 0x51, 0x61, 0xd2, 0x16, 0x46, 0x6b, 0xcb, 0x11, 0x52, 0x28, 0xc7, 0x13, 0x5c, 0x7c, 0x8e, 0x5f, 0x46, 0x6d, 0xc6, 0x5f, 0x51, 0x67, 0x82, 0x1a, 0x5c, 0x7d, 0xd1, 0x12, 0x5a, 0x6c, 0x82, 0x0b, 0x50, 0x65, 0xd2, 0x10, 0x47, 0x28, 0xcb, 0x11, 0x56, 0x61, 0xc6, 0x16, 0x51, 0x7d, 0xcc, 0x0b, 0x15, 0x7d, 0xd6, 0x5f, 0x59, 0x69, 0xc0, 0x10, 0x47, 0x6d, 0x82, 0x1a, 0x41, 0x28, 0xc6, 0x10, 0x59, 0x67, 0xd0, 0x1a, 0x15, 0x65, 0xc3, 0x18, 0x5b, 0x69, 0x82, 0x1e, 0x59, 0x61, 0xd3, 0x0a, 0x54, 0x26};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
      else
	{
	  static const unsigned char frame[] = {0x81, 0x7b, 0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2c, 0x20, 0x73, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x20, 0x65, 0x69, 0x75, 0x73, 0x6d, 0x6f, 0x64, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x2e};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
    }

    const unsigned char * frame_4_buffer(bool masked, std::size_t & size)
    {
      if(masked)
	{
	  static const unsigned char frame[] = {0x81, 0xfe, 0x01, 0xbd, 0x91, 0x4b, 0x8b, 0x2f, 0xdd, 0x24, 0xf9, 0x4a, 0xfc, 0x6b, 0xe2, 0x5f, 0xe2, 0x3e, 0xe6, 0x0f, 0xf5, 0x24, 0xe7, 0x40, 0xe3, 0x6b, 0xf8, 0x46, 0xe5, 0x6b, 0xea, 0x42, 0xf4, 0x3f, 0xa7, 0x0f, 0xf2, 0x24, 0xe5, 0x5c, 0xf4, 0x28, 0xff, 0x4a, 0xe5, 0x3e, 0xf9, 0x0f, 0xf0, 0x2f, 0xe2, 0x5f, 0xf8, 0x38, 0xe8, 0x46, 0xff, 0x2c, 0xab, 0x4a, 0xfd, 0x22, 0xff, 0x03, 0xb1, 0x38, 0xee, 0x4b, 0xb1, 0x2f, 0xe4, 0x0f, 0xf4, 0x22, 0xfe, 0x5c, 0xfc, 0x24, 0xef, 0x0f, 0xe5, 0x2e, 0xe6, 0x5f, 0xfe, 0x39, 0xab, 0x46, 0xff, 0x28, 0xe2, 0x4b, 0xf8, 0x2f, 0xfe, 0x41, 0xe5, 0x6b, 0xfe, 0x5b, 0xb1, 0x27, 0xea, 0x4d, 0xfe, 0x39, 0xee, 0x0f, 0xf4, 0x3f, 0xab, 0x4b, 0xfe, 0x27, 0xe4, 0x5d, 0xf4, 0x6b, 0xe6, 0x4e, 0xf6, 0x25, 0xea, 0x0f, 0xf0, 0x27, 0xe2, 0x5e, 0xe4, 0x2a, 0xa5, 0x0f, 0xc4, 0x3f, 0xab, 0x4a, 0xff, 0x22, 0xe6, 0x0f, 0xf0, 0x2f, 0xab, 0x42, 0xf8, 0x25, 0xe2, 0x42, 0xb1, 0x3d, 0xee, 0x41, 0xf8, 0x2a, 0xe6, 0x03, 0xb1, 0x3a, 0xfe, 0x46, 0xe2, 0x6b, 0xe5, 0x40, 0xe2, 0x3f, 0xf9, 0x5a, 0xf5, 0x6b, 0xee, 0x57, 0xf4, 0x39, 0xe8, 0x46, 0xe5, 0x2a, 0xff, 0x46, 0xfe, 0x25, 0xab, 0x5a, 0xfd, 0x27, 0xea, 0x42, 0xf2, 0x24, 0xab, 0x43, 0xf0, 0x29, 0xe4, 0x5d, 0xf8, 0x38, 0xab, 0x41, 0xf8, 0x38, 0xe2, 0x0f, 0xe4, 0x3f, 0xab, 0x4e, 0xfd, 0x22, 0xfa, 0x5a, 0xf8, 0x3b, 0xab, 0x4a, 0xe9, 0x6b, 0xee, 0x4e, 0xb1, 0x28, 0xe4, 0x42, 0xfc, 0x24, 0xef, 0x40, 0xb1, 0x28, 0xe4, 0x41, 0xe2, 0x2e, 0xfa, 0x5a, 0xf0, 0x3f, 0xa5, 0x0f, 0xd5, 0x3e, 0xe2, 0x5c, 0xb1, 0x2a, 0xfe, 0x5b, 0xf4, 0x6b, 0xe2, 0x5d, 0xe4, 0x39, 0xee, 0x0f, 0xf5, 0x24, 0xe7, 0x40, 0xe3, 0x6b, 0xe2, 0x41, 0xb1, 0x39, 0xee, 0x5f, 0xe3, 0x2e, 0xe3, 0x4a, 0xff, 0x2f, 0xee, 0x5d, 0xf8, 0x3f, 0xab, 0x46, 0xff, 0x6b, 0xfd, 0x40, 0xfd, 0x3e, 0xfb, 0x5b, 0xf0, 0x3f, 0xee, 0x0f, 0xe7, 0x2e, 0xe7, 0x46, 0xe5, 0x6b, 0xee, 0x5c, 0xe2, 0x2e, 0xab, 0x4c, 0xf8, 0x27, 0xe7, 0x5a, 0xfc, 0x6b, 0xef, 0x40, 0xfd, 0x24, 0xf9, 0x4a, 0xb1, 0x2e, 0xfe, 0x0f, 0xf7, 0x3e, 0xec, 0x46, 0xf0, 0x3f, 0xab, 0x41, 0xe4, 0x27, 0xe7, 0x4e, 0xb1, 0x3b, 0xea, 0x5d, 0xf8, 0x2a, 0xff, 0x5a, 0xe3, 0x65, 0xab, 0x6a, 0xe9, 0x28, 0xee, 0x5f, 0xe5, 0x2e, 0xfe, 0x5d, 0xb1, 0x38, 0xe2, 0x41, 0xe5, 0x6b, 0xe4, 0x4c, 0xf2, 0x2a, 0xee, 0x4c, 0xf0, 0x3f, 0xab, 0x4c, 0xe4, 0x3b, 0xe2, 0x4b, 0xf0, 0x3f, 0xea, 0x5b, 0xb1, 0x25, 0xe4, 0x41, 0xb1, 0x3b, 0xf9, 0x40, 0xf8, 0x2f, 0xee, 0x41, 0xe5, 0x67, 0xab, 0x5c, 0xe4, 0x25, 0xff, 0x0f, 0xf8, 0x25, 0xab, 0x4c, 0xe4, 0x27, 0xfb, 0x4e, 0xb1, 0x3a, 0xfe, 0x46, 0xb1, 0x24, 0xed, 0x49, 0xf8, 0x28, 0xe2, 0x4e, 0xb1, 0x2f, 0xee, 0x5c, 0xf4, 0x39, 0xfe, 0x41, 0xe5, 0x6b, 0xe6, 0x40, 0xfd, 0x27, 0xe2, 0x5b, 0xb1, 0x2a, 0xe5, 0x46, 0xfc, 0x6b, 0xe2, 0x4b, 0xb1, 0x2e, 0xf8, 0x5b, 0xb1, 0x27, 0xea, 0x4d, 0xfe, 0x39, 0xfe, 0x42, 0xbf};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
      else
	{
	  static const unsigned char frame[] = {0x81, 0x7e, 0x01, 0xbd, 0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2c, 0x20, 0x73, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x20, 0x65, 0x69, 0x75, 0x73, 0x6d, 0x6f, 0x64, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x2e, 0x20, 0x55, 0x74, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x20, 0x61, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x20, 0x76, 0x65, 0x6e, 0x69, 0x61, 0x6d, 0x2c, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x64, 0x20, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x63, 0x6f, 0x20, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x69, 0x73, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x20, 0x75, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x70, 0x20, 0x65, 0x78, 0x20, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x2e, 0x20, 0x44, 0x75, 0x69, 0x73, 0x20, 0x61, 0x75, 0x74, 0x65, 0x20, 0x69, 0x72, 0x75, 0x72, 0x65, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x70, 0x74, 0x61, 0x74, 0x65, 0x20, 0x76, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x65, 0x73, 0x73, 0x65, 0x20, 0x63, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x75, 0x20, 0x66, 0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x70, 0x61, 0x72, 0x69, 0x61, 0x74, 0x75, 0x72, 0x2e, 0x20, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x65, 0x75, 0x72, 0x20, 0x73, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x61, 0x65, 0x63, 0x61, 0x74, 0x20, 0x63, 0x75, 0x70, 0x69, 0x64, 0x61, 0x74, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x75, 0x6c, 0x70, 0x61, 0x20, 0x71, 0x75, 0x69, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x20, 0x64, 0x65, 0x73, 0x65, 0x72, 0x75, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x74, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x20, 0x69, 0x64, 0x20, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x75, 0x6d, 0x2e};

	  size = sizeof(frame) / sizeof(frame[0]);

	  return frame;
	}
    }

    const char * frame_1_payload()
    {
      return "Hello world!";
    }

    const char * frame_2_payload()
    {
      return "Hello world!!";
    }

    const char * frame_3_payload()
    {
      return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
    }

    const char * frame_4_payload()
    {
      return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
    }
  };
};
